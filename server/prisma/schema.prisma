// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") // Para Railway
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique @db.VarChar(50)
  email        String   @unique @db.VarChar(100)
  password     String   @db.Text
  profile_img  String?  @db.Text
  background_img String? @db.Text
  role         String   @default("user") @db.VarChar(10)
  created_at   DateTime @default(now())
  resetPasswordToken String?
  resetPasswordExpire DateTime?

  lists          List[]
  episodeRatings EpisodeRating[]
  animeRatings   AnimeRating[]
  favorites      Favorite[]
  topAnimes      TopAnime[]
  config         Config?
  musicRatings   MusicRating[]
}

model Anime {
  id           Int      @id @default(autoincrement())
  title        String   @db.VarChar(255)
  description  String?  @db.Text
  cover_img    String?  @db.Text
  background_img String? @db.Text
  status       String?  @db.VarChar(20)
  watch_links  String[]
  created_at   DateTime @default(now())

  animeLists    AnimeList[]
  seasons       Season[]
  animeRatings  AnimeRating[]
  favorites     Favorite[]
  topAnimes     TopAnime[]
  music         Music[]
}

model List {
  id          Int      @id @default(autoincrement())
  user_id     Int
  title       String   @db.VarChar(100)
  description String?  @db.Text
  created_at  DateTime @default(now())
  isTop       Boolean  @default(false)
  topAnimeIds String[] // IDs de animes en el top, ordenados

  user      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  animeLists AnimeList[]
}

model AnimeList {
  id      Int @id @default(autoincrement())
  list_id Int
  anime_id Int

  list   List  @relation(fields: [list_id], references: [id], onDelete: Cascade)
  anime  Anime @relation(fields: [anime_id], references: [id], onDelete: Cascade)
}

model Season {
  id        Int      @id @default(autoincrement())
  anime     Anime    @relation(fields: [animeId], references: [id], onDelete: Cascade)
  animeId   Int
  number    Int      // 1, 2, 3, etc.
  episodes  Episode[]
  music     Music[]
}

model Episode {
  id         Int      @id @default(autoincrement())
  season     Season   @relation(fields: [seasonId], references: [id], onDelete: Cascade)
  seasonId   Int
  title      String?  @db.VarChar(255)
  number     Int
  type       String?  @db.VarChar(20)
  created_at DateTime @default(now())
  episodeRatings EpisodeRating[]
}

model EpisodeRating {
  id         Int      @id @default(autoincrement())
  episode_id Int
  user_id    Int
  rating     Float
  comment    String?  @db.Text
  created_at DateTime @default(now())

  episode Episode @relation(fields: [episode_id], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model AnimeRating {
  id            Int      @id @default(autoincrement())
  anime_id      Int
  user_id       Int
  justification String?  @db.Text
  created_at    DateTime @default(now())

  anime Anime @relation(fields: [anime_id], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Favorite {
  id         Int      @id @default(autoincrement())
  user_id    Int
  anime_id   Int
  created_at DateTime @default(now())

  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  anime Anime @relation(fields: [anime_id], references: [id], onDelete: Cascade)
}

model TopAnime {
  id       Int @id @default(autoincrement())
  user_id  Int
  anime_id Int
  position Int

  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
  anime Anime @relation(fields: [anime_id], references: [id], onDelete: Cascade)

  @@unique([user_id, position])
}

model Config {
  id           Int      @id @default(autoincrement())
  user_id      Int      @unique
  mostrarListas Boolean @default(true)
  mantenerTopAbierto Boolean @default(false)
  minimizarSiempre Boolean @default(false)
  calificarOpEd Boolean @default(false)
  mostrarCorreo Boolean @default(true)
  // Puedes agregar más campos de configuración aquí

  user         User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Music {
  id            Int      @id @default(autoincrement())
  anime_id      Int
  season_id     Int?
  type          String   // 'OP' o 'ED'
  name          String
  link          String?
  image         String?
  start_episode Int?
  end_episode   Int?
  order         Int?     // Para ordenar los OP/ED
  created_at    DateTime @default(now())

  anime   Anime   @relation(fields: [anime_id], references: [id], onDelete: Cascade)
  season  Season? @relation(fields: [season_id], references: [id], onDelete: Cascade)
  ratings MusicRating[]
}

model MusicRating {
  id         Int      @id @default(autoincrement())
  music_id   Int
  user_id    Int
  rating     Float
  comment    String?
  created_at DateTime @default(now())

  music Music @relation(fields: [music_id], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [user_id], references: [id], onDelete: Cascade)
}
